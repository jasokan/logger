package com.company.speedment.test.sql696688.db0.sql696688.borrowed.impl;

import com.company.speedment.test.sql696688.db0.sql696688.borrowed.Borrowed;
import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.ShortIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table 'sql696688.db0.sql696688.borrowed'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class BorrowedManagerImpl extends AbstractSqlManager<Borrowed> {
    
    private final TypeMapper<Integer, Integer> refTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Short, Short> employeeidTypeMapper = new ShortIdentityMapper();
    private final TypeMapper<String, String> bookTypeMapper = new StringIdentityMapper();
    
    public BorrowedManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Borrowed> getEntityClass() {
        return Borrowed.class;
    }
    
    @Override
    public Object get(Borrowed entity, Column column) {
        switch (column.getName()) {
            case "ref" : return entity.getRef();
            case "employeeid" : return entity.getEmployeeid();
            case "book" : return entity.getBook();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Borrowed entity, Column column, Object value) {
        switch (column.getName()) {
            case "ref" : entity.setRef((Integer) value); break;
            case "employeeid" : entity.setEmployeeid((Short) value); break;
            case "book" : entity.setBook((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("db0.sql696688.borrowed");
    }
    
    protected Borrowed defaultReadEntity(ResultSet resultSet) {
        final Borrowed entity = newInstance();
        try {
            entity.setRef(refTypeMapper.toJavaType(resultSet.getInt("ref")));
            entity.setEmployeeid(employeeidTypeMapper.toJavaType(resultSet.getShort("employeeid")));
            entity.setBook(bookTypeMapper.toJavaType(resultSet.getString("book")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Borrowed newInstance() {
        return new BorrowedImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Borrowed entity) {
        return entity.getRef();
    }
}