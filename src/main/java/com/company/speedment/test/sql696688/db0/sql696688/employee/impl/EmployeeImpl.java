package com.company.speedment.test.sql696688.db0.sql696688.employee.impl;

import com.company.speedment.test.sql696688.db0.sql696688.borrowed.Borrowed;
import com.company.speedment.test.sql696688.db0.sql696688.employee.Employee;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'sql696688.db0.sql696688.employee'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class EmployeeImpl extends AbstractBaseEntity<Employee> implements Employee {
    
    private Short id;
    private String firstname;
    private String lastname;
    private Date birthdate;
    
    EmployeeImpl(Speedment speedment) {
        super(speedment);
    }
    
    public EmployeeImpl(Speedment speedment, final Employee employee) {
        super(speedment);
        setId(employee.getId());
        employee.getFirstname().ifPresent(this::setFirstname);
        employee.getLastname().ifPresent(this::setLastname);
        employee.getBirthdate().ifPresent(this::setBirthdate);
    }
    
    @Override
    public Short getId() {
        return id;
    }
    
    @Override
    public Optional<String> getFirstname() {
        return Optional.ofNullable(firstname);
    }
    
    @Override
    public Optional<String> getLastname() {
        return Optional.ofNullable(lastname);
    }
    
    @Override
    public Optional<Date> getBirthdate() {
        return Optional.ofNullable(birthdate);
    }
    
    @Override
    public final EmployeeImpl setId(Short id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final EmployeeImpl setFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    @Override
    public final EmployeeImpl setLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    @Override
    public final EmployeeImpl setBirthdate(Date birthdate) {
        this.birthdate = birthdate;
        return this;
    }
    
    @Override
    public Stream<Borrowed> findBorrowedsByEmployeeid() {
        return managerOf_(Borrowed.class)
                .stream().filter(Borrowed.EMPLOYEEID.equal(this.getId()));
    }
    
    @Override
    public Stream<Borrowed> findBorroweds() {
        return findBorrowedsByEmployeeid();
    }
    
    @Override
    public Employee copy() {
        return new EmployeeImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("firstname = "+Objects.toString(getFirstname().orElse(null)));
        sj.add("lastname = "+Objects.toString(getLastname().orElse(null)));
        sj.add("birthdate = "+Objects.toString(getBirthdate().orElse(null)));
        return "EmployeeImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Employee)) { return false; }
        @SuppressWarnings("unchecked")
        final Employee thatEmployee = (Employee)that;
        if (!Objects.equals(this.getId(), thatEmployee.getId())) {return false; }
        if (!Objects.equals(this.getFirstname(), thatEmployee.getFirstname())) {return false; }
        if (!Objects.equals(this.getLastname(), thatEmployee.getLastname())) {return false; }
        if (!Objects.equals(this.getBirthdate(), thatEmployee.getBirthdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getFirstname());
        hash = 31 * hash + Objects.hashCode(getLastname());
        hash = 31 * hash + Objects.hashCode(getBirthdate());
        return hash;
    }
    
    @Override
    public Class<Employee> getEntityClass_() {
        return Employee.class;
    }
}