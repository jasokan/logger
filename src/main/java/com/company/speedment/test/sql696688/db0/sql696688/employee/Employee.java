package com.company.speedment.test.sql696688.db0.sql696688.employee;

import com.company.speedment.test.sql696688.db0.sql696688.borrowed.Borrowed;
import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Date;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'sql696688.db0.sql696688.employee'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Employee extends Entity<Employee> {
    
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getId()} method.
     */
    public final static ComparableField<Employee, Short> ID = new ComparableFieldImpl<>("id", Employee::getId, Employee::setId);
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getFirstname()} method.
     */
    public final static StringField<Employee> FIRSTNAME = new StringFieldImpl<>("firstname", o -> o.getFirstname().orElse(null), Employee::setFirstname);
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getLastname()} method.
     */
    public final static StringField<Employee> LASTNAME = new StringFieldImpl<>("lastname", o -> o.getLastname().orElse(null), Employee::setLastname);
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getBirthdate()} method.
     */
    public final static ComparableField<Employee, Date> BIRTHDATE = new ComparableFieldImpl<>("birthdate", o -> o.getBirthdate().orElse(null), Employee::setBirthdate);
    
    /**
     * Returns the id of this Employee. The id field corresponds to the database
     * column db0.sql696688.employee.id.
     * 
     * @return the id of this Employee
     */
    Short getId();
    
    /**
     * Returns the firstname of this Employee. The firstname field corresponds to
     * the database column db0.sql696688.employee.firstname.
     * 
     * @return the firstname of this Employee
     */
    Optional<String> getFirstname();
    
    /**
     * Returns the lastname of this Employee. The lastname field corresponds to
     * the database column db0.sql696688.employee.lastname.
     * 
     * @return the lastname of this Employee
     */
    Optional<String> getLastname();
    
    /**
     * Returns the birthdate of this Employee. The birthdate field corresponds to
     * the database column db0.sql696688.employee.birthdate.
     * 
     * @return the birthdate of this Employee
     */
    Optional<Date> getBirthdate();
    
    /**
     * Sets the id of this Employee. The id field corresponds to the database
     * column db0.sql696688.employee.id.
     * 
     * @param id to set of this Employee
     * @return this Employee instance
     */
    Employee setId(Short id);
    
    /**
     * Sets the firstname of this Employee. The firstname field corresponds to
     * the database column db0.sql696688.employee.firstname.
     * 
     * @param firstname to set of this Employee
     * @return this Employee instance
     */
    Employee setFirstname(String firstname);
    
    /**
     * Sets the lastname of this Employee. The lastname field corresponds to the
     * database column db0.sql696688.employee.lastname.
     * 
     * @param lastname to set of this Employee
     * @return this Employee instance
     */
    Employee setLastname(String lastname);
    
    /**
     * Sets the birthdate of this Employee. The birthdate field corresponds to
     * the database column db0.sql696688.employee.birthdate.
     * 
     * @param birthdate to set of this Employee
     * @return this Employee instance
     */
    Employee setBirthdate(Date birthdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Borrowed} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Borrowed#getEmployeeid()}. The order of the Entities are undefined
     * and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Borrowed} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Borrowed#getEmployeeid()}
     */
    Stream<Borrowed> findBorrowedsByEmployeeid();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Borrowed} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Borrowed}
     * Entities that references this Entity by a foreign key
     */
    Stream<Borrowed> findBorroweds();
}