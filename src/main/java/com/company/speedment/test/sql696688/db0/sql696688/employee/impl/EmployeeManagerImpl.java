package com.company.speedment.test.sql696688.db0.sql696688.employee.impl;

import com.company.speedment.test.sql696688.db0.sql696688.employee.Employee;
import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.DateIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.ShortIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table 'sql696688.db0.sql696688.employee'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class EmployeeManagerImpl extends AbstractSqlManager<Employee> {
    
    private final TypeMapper<Short, Short> idTypeMapper = new ShortIdentityMapper();
    private final TypeMapper<String, String> firstnameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> lastnameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Date, Date> birthdateTypeMapper = new DateIdentityMapper();
    
    public EmployeeManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Employee> getEntityClass() {
        return Employee.class;
    }
    
    @Override
    public Object get(Employee entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "firstname" : return entity.getFirstname();
            case "lastname" : return entity.getLastname();
            case "birthdate" : return entity.getBirthdate();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Employee entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Short) value); break;
            case "firstname" : entity.setFirstname((String) value); break;
            case "lastname" : entity.setLastname((String) value); break;
            case "birthdate" : entity.setBirthdate((Date) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("db0.sql696688.employee");
    }
    
    protected Employee defaultReadEntity(ResultSet resultSet) {
        final Employee entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getShort("id")));
            entity.setFirstname(firstnameTypeMapper.toJavaType(resultSet.getString("firstname")));
            entity.setLastname(lastnameTypeMapper.toJavaType(resultSet.getString("lastname")));
            entity.setBirthdate(birthdateTypeMapper.toJavaType(resultSet.getDate("birthdate")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Employee newInstance() {
        return new EmployeeImpl(speedment);
    }
    
    @Override
    public Short primaryKeyFor(Employee entity) {
        return entity.getId();
    }
}