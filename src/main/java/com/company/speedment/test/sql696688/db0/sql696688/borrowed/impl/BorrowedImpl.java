package com.company.speedment.test.sql696688.db0.sql696688.borrowed.impl;

import com.company.speedment.test.sql696688.db0.sql696688.borrowed.Borrowed;
import com.company.speedment.test.sql696688.db0.sql696688.employee.Employee;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'sql696688.db0.sql696688.borrowed'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class BorrowedImpl extends AbstractBaseEntity<Borrowed> implements Borrowed {
    
    private Integer ref;
    private Short employeeid;
    private String book;
    
    BorrowedImpl(Speedment speedment) {
        super(speedment);
    }
    
    public BorrowedImpl(Speedment speedment, final Borrowed borrowed) {
        super(speedment);
        setRef(borrowed.getRef());
        setEmployeeid(borrowed.getEmployeeid());
        borrowed.getBook().ifPresent(this::setBook);
    }
    
    @Override
    public Integer getRef() {
        return ref;
    }
    
    @Override
    public Short getEmployeeid() {
        return employeeid;
    }
    
    @Override
    public Optional<String> getBook() {
        return Optional.ofNullable(book);
    }
    
    @Override
    public final BorrowedImpl setRef(Integer ref) {
        this.ref = ref;
        return this;
    }
    
    @Override
    public final BorrowedImpl setEmployeeid(Short employeeid) {
        this.employeeid = employeeid;
        return this;
    }
    
    @Override
    public final BorrowedImpl setBook(String book) {
        this.book = book;
        return this;
    }
    
    @Override
    public Employee findEmployeeid() {
        return managerOf_(Employee.class).stream()
            .filter(Employee.ID.equal(getEmployeeid()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Employee is set to " + getEmployeeid()
                ));
            
    }
    
    @Override
    public Borrowed copy() {
        return new BorrowedImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("ref = "+Objects.toString(getRef()));
        sj.add("employeeid = "+Objects.toString(getEmployeeid()));
        sj.add("book = "+Objects.toString(getBook().orElse(null)));
        return "BorrowedImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Borrowed)) { return false; }
        @SuppressWarnings("unchecked")
        final Borrowed thatBorrowed = (Borrowed)that;
        if (!Objects.equals(this.getRef(), thatBorrowed.getRef())) {return false; }
        if (!Objects.equals(this.getEmployeeid(), thatBorrowed.getEmployeeid())) {return false; }
        if (!Objects.equals(this.getBook(), thatBorrowed.getBook())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getRef());
        hash = 31 * hash + Objects.hashCode(getEmployeeid());
        hash = 31 * hash + Objects.hashCode(getBook());
        return hash;
    }
    
    @Override
    public Class<Borrowed> getEntityClass_() {
        return Borrowed.class;
    }
}